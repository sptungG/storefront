{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "useTranslation": {
    "prefix": "ct",
    "body": ["const { t } = useTranslation();"],
    "description": "useTranslation",
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "i18nt": {
    "prefix": "i1",
    "body": ["i18nt"],
    "description": "i18nt",
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "consoleLog": {
    "prefix": "clg",
    "body": ["console.log(${1:first})"],
    "description": "Displays a message in the console",
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "importReact": {
    "prefix": "impr",
    "body": ["import React from 'react';"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "exportDefault": {
    "prefix": "expd",
    "body": ["const ${1:first} = {};", "export default ${1:first};"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "exportConst": {
    "prefix": "expc",
    "body": ["export const ${1:first} = {};"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "exportInterface": {
    "prefix": "expi",
    "body": ["export interface ${1:first} {};"],
    "scope": "typescript,typescriptreact",
  },
  "exportType": {
    "prefix": "expt",
    "body": ["export type ${1:first} = {};"],
    "scope": "typescript,typescriptreact",
  },
  "exportFunc": {
    "prefix": "expf",
    "body": ["export function ${1:first}(){};"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "exportFrom": {
    "prefix": "exp-from",
    "body": ["export ${1:first} from ${2:second};"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "useCallback": {
    "prefix": "useCallbackSnippet",
    "body": ["useCallback(", "  () => {", "    ${1:first}", "  },", "  [${2:second}],", ")", ""],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "useContext": {
    "prefix": "useContextSnippet",
    "body": ["const ${1:first} = useContext(${2:second})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "useEffect": {
    "prefix": "useEffectSnippet",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      "",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandleSnippet",
    "body": [
      "useImperativeHandle(",
      "  ${1:first},",
      "  () => {",
      "    ${2:second}",
      "  },",
      "  [${3:third}],",
      ")",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffectSnippet",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  };",
      "}, [${3:third}])",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "useMemo": {
    "prefix": "useMemoSnippet",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "useReducer": {
    "prefix": "useReducerSnippet",
    "body": ["const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "useRef": {
    "prefix": "useRefSnippet",
    "body": ["const ${1:first} = useRef(${2:second})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "useState": {
    "prefix": "useStateSnippet",
    "body": ["const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "reactFunctionalExport": {
    "prefix": "rfe",
    "body": [
      "import React from 'react'",
      "",
      "type T${1:${TM_FILENAME_BASE}}Props = { };",
      "",
      "export function ${1:${TM_FILENAME_BASE}}({ }: T${1:${TM_FILENAME_BASE}}Props) {",
      "  return {};",
      "}",
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "reactFunctionalExportComponent": {
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "type T${1:${TM_FILENAME_BASE}}Props = { children?: React.ReactNode };",
      "",
      "function ${1:${TM_FILENAME_BASE}}({ children }: T${1:${TM_FILENAME_BASE}}Props) {",
      "  return <div>{children}</div>;",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "reactArrowFunctionalExportComponent": {
    "prefix": "rafce",
    "body": [
      "import React from 'react'",
      "",
      "type T${1:${TM_FILENAME_BASE}}Props = { children?: React.ReactNode };",
      "",
      "const ${1:${TM_FILENAME_BASE}} = ({ children }: T${1:${TM_FILENAME_BASE}}Props) => {",
      "  return <div>{children}</div>;",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
    ],
    "description": "Creates a React Functional Component with ES7 module system",
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "reactArrowFunctionalExportComponent Emotion-Styled": {
    "scope": "typescriptreact",
    "prefix": "rafce-e",
    "body": [
      "import styled from '@emotion/styled';",
      "import React from 'react'",
      "",
      "type T${1:${TM_FILENAME_BASE}}Props = { children?: React.ReactNode };",
      "",
      "const ${1:${TM_FILENAME_BASE}} = ({ children }: T${1:${TM_FILENAME_BASE}}Props) => {",
      "  return <${1:${TM_FILENAME_BASE}}Styled>{children}</${1:${TM_FILENAME_BASE}}Styled>",
      "};",
      "const ${1:${TM_FILENAME_BASE}}Styled = styled.div``;",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
    ],
  },
  "Typescript React forwardRef component": {
    "scope": "typescriptreact",
    "prefix": "rafce-forwardRef",
    "body": [
      "import { forwardRef, ForwardRefRenderFunction } from 'react'",
      "",
      "type T${1:${TM_FILENAME_BASE}}Props = React.${3:HTML}Attributes<HTML${2:Div}Element> & { children?: React.ReactNode };",
      "",
      "const Internal${1:${TM_FILENAME_BASE}}: ForwardRefRenderFunction<HTML${2:Div}Element,T${1:${TM_FILENAME_BASE}}Props> = (",
      "  { children },",
      "  forwardedRef,",
      ") => {",
      "  return <div ref={forwardedRef}>{children}</div>",
      "};",
      "",
      "export default forwardRef(Internal${1:${TM_FILENAME_BASE}});",
    ],
  },
}
